server:
  port: 9003

spring:
  application:
    name: dispatcher-service
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false                                      # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    function:
      definition: pack|label                                # Define functions to be managed by Spring Cloud Functions
    stream:
      bindings:                                             # 대상 바인딩 설정을 위한 섹션
        packlabel-in-0:
          destination: order-accepted                       # 바인더를 연결할 대상의 브로커 내에서의 실제 이름(래빗MQ의 익스체인지)
          group: ${spring.application.name}                 # 대상에 관심을 갖는 소비자 그룹
        packlabel-out-0:
          destination: order-dispatched                     # 바인더를 연결할 대상의 브로커 내에서의 실제 이름
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Polar Bookshop

management:
  endpoints:
    web:
      exposure:
        include: bindings, configprops, env, functions, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}